/*2250420 软工 陈君*/
#include <iostream>
#include <iomanip>
using namespace std;

#define N_POW	112		//幂的次数
#define N_NUM	N_POW+1	//十进制形式的小数位数

/***************************************************************************
  函数名称：
  功    能：输出某一行的幂次（某个一维数组的内容）
  输入参数：
  返 回 值：
  说    明：pormpt为非空串则输出串内容
				  为空串则输出“2^-xxx”，具体见demo
***************************************************************************/
void output(const char prompt[], const char d[])
{
	if (prompt == "")//输出幂次
	{
		cout << "2^" << setiosflags(ios::right) << setw(4) << int(d[0]) << " : 0.";
		for (int i = 0; i < -d[0]; i++)
			cout << char(d[i + 1] + '0');
		cout << endl;
	}
	else
	{
		cout << prompt;
		cout << d;
		cout << endl;
	}

}

/***************************************************************************
  函数名称：
  功    能：用二维数组第i行的值，计算第i+1行
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
void calc_next(char d_cur[], char d_next[])
{
	int n = -d_cur[0];//获取这一行的位数 
	char plus = 0;
	for (int i = n + 1; i > 1; i--)
	{
		d_next[i] = (d_cur[i - 1] * 5 + plus) % 10;//这一位等于相乘最后一位加上之前的进位
		plus = (d_cur[i - 1] * 5 + plus) / 10; //获取进位
	}
	d_next[1] = plus;//第一位就只用加进位就行 
}

/***************************************************************************
  函数名称：
  功    能：根据幂次表，计算某个二进制小数的十进制值
  输入参数：char pure_decimal[] : 存放二进制小数的数组
			char out[] ：存放计算得到的十进制小数
		   char power_table[][N_NUM + 1]：幂次表
  返 回 值：
  说    明：
 ***************************************************************************/
void calc_num(char pure_decimal[], char out[], char power_table[][N_NUM + 1])
/* 初始化，[0]里面存放幂次，初始化后的结果为：
	   行|列  [0]   [1]   [2]
	   [0]     0     0     0  //本行不用
	   [1]     -1    5     0  // 2^-1 初始化为0.5
	   [2]     -2    0     0
	   ...
	   [112]   -112  0     0
	*/
{
	//pure_decimal里面的字符为正常的字符穿
	int n = strlen(pure_decimal);//获取计算值的位数，也是out的位数
	char plus = 0;//进位
	for (int i = n; i > 0; i--)//从第n位开始算out的值,一次算out i位的值
	{
		char sum = 0;
		for (int j = n; j > 0; j--)//算出sum的值
			if (pure_decimal[j - 1] == '1')
				sum += power_table[j][i];
		out[i - 1] = (sum + plus) % 10;
		plus = (sum + plus) / 10;
	}
	for (int i = 0; i < n; i++)//将out转换成正常的char字符
		out[i] = out[i] + '0';
}

/***************************************************************************
  函数名称：
  功    能：输入一个二进制纯小数
  输入参数：
  返 回 值：
  说    明：
 ***************************************************************************/
void input_pure_decimal(char pure_decimal[])
{
	cout << "请输入一个二进制纯小数，小数点开头，小数点后不超过112位(例：.101101)" << endl;

	while (1)
	{
		char a = getchar();
		if ('.' == a)
			break;
		else
			cout << "不是以.开头，请重输" << endl;
		while (getchar() != '\n')
			;
	}
		cout << endl;
	int n = 0;
	while (1)
	{
		if (n == N_NUM)
			break;
		char a = getchar();
		if (a == '\n')
			break;
		if (a != '1' && a != '0')
		{
			cout << "输入的不是0/1，请重输" << endl;
			n = 0;
			for (int i = 0; i < n; i++)//清零
				pure_decimal[i] = 0;
			while (getchar() != '\n')
				;
		}
		else
		{
			pure_decimal[n] = a;
			n++;
		}
	}
	for (int i = strlen(pure_decimal); pure_decimal[i] != '1'; i--)//将末尾的字符0，转化为尾零
		pure_decimal[i] = '\0';
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：is_upper ：1 - 上标尺
						 0 - 下标尺
  返 回 值：
  说    明：
***************************************************************************/
void output_rod(const bool is_upper)
{
	if (is_upper) { //上标尺
		cout << "-----------------------------------------------------------------------------------------------------------------------------------" << endl;
		cout << "----------- 上标尺  1         2         3         4         5         6         7         8         9         A         B         C" << endl;
		cout << "-----------123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890" << endl;
		cout << "-----------------------------------------------------------------------------------------------------------------------------------" << endl;
	}
	else {//下标尺
		cout << "-----------------------------------------------------------------------------------------------------------------------------------" << endl;
		cout << "-----------123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890" << endl;
		cout << "----------- 下标尺  1         2         3         4         5         6         7         8         9         A         B         C" << endl;
		cout << "-----------------------------------------------------------------------------------------------------------------------------------" << endl;
	}
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int main()
{
	/* 说明：首先定义 power_table[113][114]，输出为全0，再进行初始化
	*
	*  1、第[0]行整个不用，[1]~[112] 与2^-1 ~ 2^-112 对应，因此需要113行
	*  2、第[0]列存放幂次，[1]~[112]列依次存放十分位、百分位、千分位、...  （2^-i次方的十进制小数，最多i位），[113]预留，用于某些特殊要求，比如\0
	*  2、每行的第0列存放幂次，[1]~开始存放十进制的每一位，从而达到高精度存放的目的
	*     例：        第[0]列  第[1]列  第[2]列  第[3]列  第[4]列 ...
	*		第[1]行     -1        5        0        0        0		//表示0.5
	*		第[2]行     -2        2        5        0        0		//表示0.25
	*		第[3]行     -3        1        2        5        0		//表示0.125
	*		第[4]行     -4        0        6        2        5		//表示0.0625
	*			...
	*		第[112]行 -112   ...
	*
	注：1、本二维数组的类型，既可以是int，也可以是char，因为计算时，每个元素的值都在0-9之间，用char足够了（char型输出时注意数字0-9和字符0-9的问题即可）
		2、因为如此，本题放在数组综合训练中，而没有放在字符数组中
	*/
	char power_table[N_POW + 1][N_NUM + 1] = { 0 }; //先全部初始化为0
	int i;

	/* 初始化，[0]里面存放幂次，初始化后的结果为：
	   行|列  [0]   [1]   [2]
	   [0]     0     0     0  //本行不用
	   [1]     -1    5     0  // 2^-1 初始化为0.5
	   [2]     -2    0     0
	   ...
	   [112]   -112  0     0
	*/
	for (i = 1; i <= N_POW; i++) {
		power_table[i][0] = -i; //幂次 -1 ~ -52
	}
	power_table[1][1] = 5; // 2^-1 = 0.5，先置[1][1]为5

	/* 循环方式计算幂表：
	   1、二维数组带一个下标，表示一个大小为114的一维数组
	   2、2^-1为已知的0.5，power_table[1]的内容为 -1 5 0 0 0 ... 0
	*/
	for (i = 1; i < N_POW; i++)
		calc_next(power_table[i], power_table[i + 1]); //已知2^-i，求2^-(i+1)

	/* 上标尺 */
	output_rod(1);

	/* 输出 */
	for (i = 1; i <= N_POW; i++)
		output("", power_table[i]);

	/* 下标尺 */
	output_rod(0);
	cout << endl;

	/* 输入一个二进制纯小数 */
	char pure_decimal[N_NUM + 1] = { 0 };
	input_pure_decimal(pure_decimal);

	/* 上标尺 */
	output_rod(1);

	output("输入数据 : ", pure_decimal);
	char out[N_NUM + 1] = { 0 };
	calc_num(pure_decimal, out, power_table);
	output("计算值 : 0.", out);
	/* 下标尺 */
	output_rod(0);

	cout << endl;
	return 0;
}

/*
PPT例题的测试数据
.00110011001100110011010
*/
